<!-- livebook:{"persist_outputs":true} -->

# Dia 15 - Sensores e Beacons

```elixir
Mix.install([
  {:kino, "~> 0.8.0"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Estrela 1 - Posições da linha 2.000.000

```elixir
input = Kino.Input.textarea("Entrada")
```

Vamos armazenar o arquivo de entrada como várias listas com duas tuplas no formato: `[coordenadas_do_sensor, coordenadas_do_beacon]`

```elixir
sensors_and_beacons =
  input
  |> Kino.Input.read()
  |> String.split(["Sensor at x=", ", y=", ": closest beacon is at x=", "\n"], trim: true)
  |> Enum.map(&String.to_integer/1)
  |> Enum.chunk_every(2)
  |> Enum.map(&List.to_tuple/1)
  |> Enum.chunk_every(2)
```

<!-- livebook:{"output":true} -->

```
[
  [{3729579, 1453415}, {4078883, 2522671}],
  [{3662668, 2749205}, {4078883, 2522671}],
  [{257356, 175834}, {1207332, 429175}],
  [{2502777, 3970934}, {3102959, 3443573}],
  [{24076, 2510696}, {274522, 2000000}],
  [{3163363, 3448163}, {3102959, 3443573}],
  [{1011369, 447686}, {1207332, 429175}],
  [{3954188, 3117617}, {4078883, 2522671}],
  [{3480746, 3150039}, {3301559, 3383795}],
  [{2999116, 3137910}, {3102959, 3443573}],
  [{3546198, 462510}, {3283798, -405749}],
  [{650838, 1255586}, {274522, 2000000}],
  [{3231242, 3342921}, {3301559, 3383795}],
  [{1337998, 31701}, {1207332, 429175}],
  [{1184009, 3259703}, {2677313, 2951659}],
  [{212559, 1737114}, {274522, 2000000}],
  [{161020, 2251470}, {274522, 2000000}],
  [{3744187, 3722432}, {3301559, 3383795}],
  [{2318112, 2254019}, {2677313, 2951659}],
  [{2554810, 56579}, {3283798, -405749}],
  [{1240184, 897870}, {1207332, 429175}],
  [{2971747, 2662873}, {2677313, 2951659}],
  [{3213584, 3463821}, {3102959, 3443573}],
  [{37652, 3969055}, {-615866, 3091738}],
  [{1804153, 1170987}, {1207332, 429175}]
]
```

## Estrela 1: Espaços indisponíveis em uma linha

O arquivo de entrada possui **MUITAS** linhas e colunas, e seria inviável criar mapas ou listas com as coordenadas nesse caso.

Por isso, vamos usar `Range` para armazenar as faixas onde certamente não encontraremos outro beacon em uma determinada linha. Por exemplo (fictício):

* Linha 2 -> `[0..3, 5..20]`

O exemplo acima nos mostra uma linha com **20 posições** onde sabemos não haver nenhum beacon, pois o primeiro `Range` tem tamanho 4 e o último tem tamanho 16. Isto é feito com a função `Range.size/1`.

Note que pode haver sobreposição dos intervalos, e para isso vamos usar a função `BeaconDetector.join_ranges/2` para corrigir este problema.

```elixir
defmodule BeaconDetector do
  def calc_distance(sensor, beacon) do
    {beacon_x, beacon_y} = beacon
    {sensor_x, sensor_y} = sensor
    {sensor, abs(sensor_x - beacon_x) + abs(sensor_y - beacon_y)}
  end

  def count_unknown_spots_at(line, sensor_and_distances) do
    sensor_and_distances
    |> Enum.filter(fn {{_, sensor_y}, distance} ->
      line in (sensor_y - distance)..(sensor_y + distance)
    end)
    |> Enum.map(fn {{sensor_x, sensor_y}, distance} ->
      x_distance = distance - abs(sensor_y - line)

      if x_distance >= 0, do: (sensor_x - x_distance)..(sensor_x + x_distance)
    end)
    |> join_ranges()
    |> Enum.map(&Range.size/1)
    |> Enum.sum()
  end

  def count_beacons_at(line, beacons_and_sensors) do
    beacons_and_sensors
    |> Enum.map(fn [_sensor, beacon] -> beacon end)
    |> Enum.filter(fn {_bx, beacon_y} ->
      beacon_y == line
    end)
    |> Enum.uniq()
    |> Enum.count()
  end

  defp join_ranges(range_list) do
    Enum.sort_by(range_list, fn first.._last -> first end)
    |> Enum.reduce([], fn range, ranges ->
      cond do
        ranges == [] ->
          [range]

        Range.disjoint?(range, hd(ranges)) ->
          [range | ranges]

        true ->
          first1..last1 = range
          first2..last2 = hd(ranges)
          [min(first1, first2)..max(last1, last2) | tl(ranges)]
      end
    end)
  end

  # Estrela 2
  def find_uncovered_spot_at(line, size, sensor_and_distances) do
    sensor_and_distances
    |> Enum.filter(fn {{_, sensor_y}, distance} ->
      line in (sensor_y - distance)..(sensor_y + distance)
    end)
    |> Enum.map(fn {{sensor_x, sensor_y}, distance} ->
      x_distance = distance - abs(sensor_y - line)
      min_x = max(sensor_x - x_distance, 0)
      max_x = min(sensor_x + x_distance, size)

      if x_distance >= 0, do: min_x..max_x
    end)
    |> join_ranges()
  end

  def find_uncovered_spot(size, sensors_and_distances) do
    Enum.find_value(0..size, fn line ->
      unavailable_columns = find_uncovered_spot_at(line, size, sensors_and_distances)

      total_unavailable_spots =
        unavailable_columns
        |> Enum.map(&Range.size/1)
        |> Enum.sum()

      if total_unavailable_spots == size do
        column =
          Enum.find(0..size, fn column ->
            Enum.all?(unavailable_columns, fn range -> column not in range end)
          end)

        {column, line}
      else
        false
      end
    end)
  end
end

sensor_distances =
  sensors_and_beacons
  |> Enum.map(fn [sensor, beacon] -> BeaconDetector.calc_distance(sensor, beacon) end)

line = 2_000_000

BeaconDetector.count_unknown_spots_at(line, sensor_distances)
|> Kernel.-(BeaconDetector.count_beacons_at(line, sensors_and_beacons))
```

<!-- livebook:{"output":true} -->

```
4827924
```

## Estrela 2: A origem do sinal

A função `BeaconDetector.find_uncovered_spot/2` é uma versão alterada da função `BeaconDetector.count_unknown_spots_at/2` que usamos para solucionar a **Estrela 1**.

Ao invés de contar o número de posições onde não encontraremos _Beacons_, ela nos retorna as coordenadas que não pertencem aos `Range` calculados anteriormente. Como neste caso não sabemos a linha exata, precisamos testar todas as linhas do mapa.

```elixir
{x, y} = BeaconDetector.find_uncovered_spot(4_000_000, sensor_distances)
x * 4_000_000 + y
```

<!-- livebook:{"output":true} -->

```
12977110973564
```
