<!-- livebook:{"persist_outputs":true} -->

# Dia 13 - Sinal de Socorro

```elixir
Mix.install([
  {:kino, "~> 0.8.0"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Leitura do arquivo de entrada

```elixir
input = Kino.Input.textarea("Entrada")
```

O arquivo de entrada é um pouco chatinho de ler, e por isso vamos criar um parse que lê caracter por caracter.

Mas antes de colocá-lo para funcionar, precisamos de transformar o arquivo texto em listas de caracteres.

```elixir
defmodule PacketParser do
  def parse(["]" | []], list), do: {list, []}

  def parse(["," | rest], list), do: parse(rest, list)
  def parse(["]" | rest], list), do: {list, rest}

  def parse(["[" | rest], list) do
    {sub_list, new_rest} = parse(rest, [])
    new_list = list ++ [sub_list]

    if new_rest == [] do
      new_list
    else
      parse(new_rest, new_list)
    end
  end

  def parse([number | rest], list) do
    new_list = list ++ [String.to_integer(number)]
    parse(rest, new_list)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, PacketParser, <<70, 79, 82, 49, 0, 0, 8, ...>>, {:parse, 2}}
```

### Alerta de Pegadinha!

> O arquivo de testes só tem números que vão de 1 a 9, mas o arquivo de verdade tinha também o número 10. Então precisamos tomar cuidado para não separar o 10 em 1 e 0.

Como o arquivo só contém números, e os caracteres `[`, `]` e `,`, uma boa forma de isolar os números é adicionar espaços entre os caracteres que desejamos isolar e depois separar a string nestes mesmos espaços.

Aí é só usar nosso parser e teremos uma lista de tuplas que contêm dois pacotes cada.

```elixir
packets =
  Kino.Input.read(input)
  |> String.replace(",", " , ")
  |> String.replace("[", " [ ")
  |> String.replace("]", " ] ")
  |> String.split("\n", trim: true)
  |> Enum.map(fn packet -> String.split(packet, " ", trim: true) end)
  |> Enum.map(fn packet -> PacketParser.parse(packet, []) end)
  |> Enum.map(fn item -> Enum.at(item, 0) end)
  |> Enum.chunk_every(2)
  |> Enum.map(&List.to_tuple/1)
```

<!-- livebook:{"output":true} -->

```
[
  {[
     [[[], '\n', [5, 6, 2], 6], [2, [6, 3], 7, 5, 2], [6, 10, 5, [], 6], [[5, 9], 5]],
     [],
     ['\n', [[8, 9, 1, 7], [0, 8, 10, 10]], 8],
     [2, [[0, 5], [0, 6], [], 0, [7, 8, 4]], [[4, 1, 7, 6], 4, 8, [], [5, 7, 7, 0]], 10],
     [[[], 0, 4, 3], 5]
   ], [[5, 10, [[4, 5], 8, [0, 7, 5]], [6, [5, 6, 4, 0, 7], 1]]]},
  {[[[3, '\b\n', 3, 7], [], [[6]]], [[[], [], 5, 9], 1, [[5, 10, 10, 5]]]], [[4]]},
  {[
     [[[9, 0, 4, 0], [1, 0, 9, 9, 10], 7], 3, 4, []],
     [[10, [1, 8], 8, 1], [[10, 4], [2, 1, 1]]],
     [],
     [],
     [2, [5, 6, [2, 9, 3], [2, 5], [10, 6, 1]]]
   ], [[8, [[2], [10, 4, 3, 8], []], [5, 3, 1, []], 6, [8, '\n', [10, 5]]], []]},
  {[[7, []]],
   [
     [[10, [2, 9, 4, 1, 2], [6, 2], [6, 2, 0, 9, 1], 1], 3, 2, 5, [3, []]],
     [10, 0, 9, 1],
     [2, 7, '\a', [1, 0, 9, 6]],
     [[5, 0, 7, '\t'], [[1, 8, 2, 3], [0, 10, 5, 2], [], 7, 7], 5, 5, 10]
   ]},
  {[['\a', 2, [5], 1]], [[0, 0, 3, ['\b\a', 5, 5, 4, [0, 10, 2, 3]]]]},
  {[[], [[5, 2, 0, [], 0]]],
   [
     [[3, 5], ['\b', 6], 0, [5, 6, 0, 1], [0]],
     [[[3, 5]], 7, 8],
     [[], [7, [5, 8, 5, 0, 3], 10, [3]], ['\t\b', [5, 9, 0, 10, 3], [4, 2, 4, 8], 9, []], 6]
   ]},
  {[[], [[[2, 3, 6]], 10, [[3, 1, 0, 7, 2], 7]]],
   [
     [[6, [6, 10, 3], [10, 5, 1], 8, [2, 9, 1, 6]]],
     [6, [[], [5, 7, 2, 9]], [7, 6, '\t']],
     [[[2, 9, 7], [1, 9, 2, 1], 7, 4], 8, 9]
   ]},
  {[[5, 5, 5, []]],
   [
     [3, [[9, 0, 0], 10, '\t', [5, 5, 4]], 5, 5],
     [
       7,
       [0, '\n', 3, [3], [7, 4, 3, 2]],
       [[5, 5]],
       [[], 6, '\n\a', [7, 4]],
       [[7, 5, 7], 2, 7, [5, 3, 2], []]
     ],
     [[[4, 5, 10], [], [], [2, 0]]],
     [7, 0, [[], 1, []], [[], [4, 3, 3, 8], 5, 6, [6, 6]]],
     '\a\t'
   ]},
  {[
     [],
     [[[2, 0], [4, 4, 8, 5, 3], 2, 3, []], [10, 0, 5, [7, 6, 8, 9], [1, 1, 7]], 0, 10, 4],
     [[], 6, [[10, 2, 1, 6], [6], 8, [2, 10, 5, 0, 1]]]
   ],
   [
     [10, 9, [[], [9, 1, 0, 8], [5, 6], 2], 2],
     [[[8, 8, 1, 9, 5], 8, [10, 10, 7, 4], 10], [3, '\t', 2, 0], 0, [[3, 7], 5]],
     [6, [1], 5, 10, 7],
     [],
     [0, [], 10, [[3, 7, 0], '\a\n', 0, 4, 2], 10]
   ]},
  {[[6, 7, [], '\b', [5, [7, 7, 1]]], [5, [8, [7, 5], [4, 2, 10, 6, 10]], [6, 3, [1], []]], []],
   [
     [['\n']],
     [],
     [
       6,
       [5],
       [[4, 6, 1, 5], [3, 1, 7, 0, 2]],
       4,
       [[6, 5], [9, 3, 3, 10], [2, 10, 9, 7], [9, 6, 1, 0]]
     ],
     [[[1, 9, 0], 9], [4, 3], 3],
     [[10, 4]]
   ]},
  {[
     [5, 2, [[6, 5, 7, 5], [3, 8, 9]], 4, 3],
     [0, [2, 10, 4, 6, 6], 3],
     [[[5], [6, 10, 5, 8, 4]], []],
     []
   ], [[], [[[], [0, 6, 2, 9], 7, 10], 0, 9], [5, 6, [[2], [0, 5, 5, 6], 5], 5]]},
  {[
     [[], 4, [9, [8, 4, 6], [5, 8, 8], 10], [2, 2, [], [1, 2, 0, 2, 5]]],
     [[3], 9],
     [3, 4],
     [[[5, 10, 2], 6, [6], 8, 10]],
     []
   ], [[], ['\b', [1], 8], []]},
  {[
     [5, 1, [[3, 7], 6, 8, 0], 9, 8],
     [[[], [2, 4, 1, 10], [8, 3, 4], 2], 1],
     [[[], 0, 6, 10, '\n'], [], '\n', [2, [9, 0], [6, 9, 1], 4], [[10, 2, 7, 5, 0], 7, 9, 4]]
   ], [[[7, [0], 7, 1], [1, '\t', [4, 9, 4], '\b\b\n', 8]], []]},
  {[
     [2, 4],
     [],
     [7, [[5], 10, 3, [6, 10, 6]], 2],
     [3, 8, 8, 9],
     [5, 9, [3, [2, 1], [], [3, 0, 6, 4]], [[], [6, 0, 5, 9, 7]]]
   ], [[[5, 9, [2, 6]], 3, 9, [[7, 5, 6], 6, 4, [4]], 5], [2, 10], '\n\b\b']},
  {[[3, 10, [10, [9, 5, 4, 3, 5]]], [2, 4]],
   [
     [4, 9],
     [],
     [],
     [[[2, 10], [8, 7, 2, 3, 7], 1, [10, 0, 4, 3]], 5, [[0, 3], [2, 1, 8, 10], 4, []], 4],
     [[], 8, [[2, 0, 7, 4]]]
   ]},
  {[[[1, 9, [9, 3, 8], 5, 8], 7, 10, 4, 9]],
   [[[], 1, 9, 5], [], [[2, 1], [8, [8, 6, 0, 7], 6, [6, 7, 3]], 6, 2, 9]]},
  {[[8, []], [['\b\t', 3, [0, 10, 2], '\a\a\t', 6]]],
   [
     [],
     [
       [6, [1], 8],
       [[9, 7, 7, 4, 2], [3], 0, 1, 7],
       [[], [0, 10, 3, 7, 3], 0, [5, 6, 1, 2, 6], 9],
       8
     ],
     [0, 3],
     [],
     []
   ]},
  {[
     [[], [1, [], 6, [0, 6, 9, 10], 7]],
     '\a',
     [9, 6, 1, 10, [[], 0, 4, 10]],
     [4, [5, [4, 7, 10, 7, 7], '\a'], 9, 4],
     [5]
   ], [[3, 0, 5], [], []]},
  {[
     [6, 9, 0],
     [5],
     '\b\a',
     [4, 3, [5, [2, 1]], []],
     [[[0, 5, 6, 10, 1], 1, [5, 5, 3], 7, 4], 9, 8, 6, 8]
   ],
   [
     [[[10, 8, 3, 1]], 2],
     [],
     [5, [3, 2], 1, [[9, 1], 1, 8, 6], ['\b', 7]],
     [[5], 2],
     [3, '\t\t', 10, 3]
   ]},
  {[[[3, []], 2]], [[2, []], [6, [4, 8], [[4, 0, 4, 1, 7], 3, [0], []], 1, 10]]},
  {[
     [[[4, 7, 10, 7, 6], [], 3, [2, 10]], 10, [10, 10, [3, 9, 3, 3], [0, 10, 5, 5, 4], 5], 9],
     [4, [[0, 3]], [7, 2, [8, 4, 1, 4, 2]]]
   ],
   [
     [1],
     [[[]], [10, 5], [[4, 7, 6], [4, 8, 10], 1], 0],
     [[5, 0, [2, 9]], 7],
     [[7, 4], [], [3, 3]],
     [7, 1, [[0, 9, 3, 5, 4], 9, [2], [10, 0, 6], 4], 6]
   ]},
  {[[[2, [], [5]]]], [[['\n']]]},
  {[
     [[[5, 1, 5, 7, 10], 9], 9, [[9, 2, 0], [1, 10, 1, 5, 3], [3], 8], []],
     [5, [6, 6, []]],
     [3, 2, [], 2, 0],
     [[4, 6], 0, 4],
     []
   ], [[7, [8, [], [6, 7], 6, [2]]], []]},
  {[
     [[], 9],
     [3, [[5, 8, 8, 5, 10], [], 2, [6, 9, 4], [9, 7, 3, 10]]],
     [[], [[2, 2], 10, [3, 3, 0, 0], 3, []], 6, 3, 8],
     [4, 4, 3],
     [10, 5, [[1, 4, 7, 4], 3, [6, 5]]]
   ], [[[[6, 8, 10, 2, 2], [9, 4]], 10, [1, 7], []], [[[4, 5]]], [3, [0, []]]]},
  {[[], [], [3, 5, 9], [], [[[9, 10, 0, 4], 10, 8, 4, '\b\t'], 6]],
   [
     [[6, 4, 4], 8, [3, 6, 10, [3], []]],
     [1, ['\b\t', [1, 10, 0]]],
     [6, [], 4, []],
     [[[10, 0], []], [[4, 1, 10, 0]], 1, [5, [0, 2, 1, 10, 4], '\a\n', 10], 2],
     [5, [[], 2, [0], 9, 9]]
   ]},
  {[[0], [], [6, [2, '\b', 7, 10, [3]], 10, 4, [2]], [], [[], 1]], [[10, [[], 2, 3], 3]]},
  {[
     [[5], [[], 8, [5, 7, 5], '\a', []], [6, 4, 1, [4, 8, 10], 10], [], [[], [8, 1]]],
     [],
     [[0, 9], [5, [4, 5], [0]], 1, 5, 7],
     [[[2, 7, 9, 1, 5], 7, [10, 4, 6, 6], 8], 2, 1, 10]
   ],
   [
     [5, [], 9, 5, 9],
     [],
     [[10, [], 9, [6, 6, 1, 1, 4], 7], [9, [7, 6, 2, 8, 8], [4, 7, 4, 5, 4], 5]],
     [8, 5],
     [[8, [3, 3, 7], [9, 0, 9, 7, 1]], [], [[6, 8, 1, 8, 3], [8, 10, 1, 4], [3, 1, 2, 2]], 6, [0]]
   ]},
  {['\b'], [[3, [[7, 6, 6, 0, 9]], 6, 2], [[], [[]], []], [2, 3, 6], [10, [5, 2, 9]]]},
  {[
     [[0, 3, [3, 7]], [9, 1, [9, 4, 3, 3], 6, 6], [2, 4, 4], [[8, 3, 9, 1], 9], 8],
     [8, []],
     [],
     [[[6, 7], [9, 10, 6, 6, 8], 10, [3, 4, 4]]],
     []
   ],
   [
     [
       '\a',
       [[5, 2, 7, 8]],
       [[9, 8, 9, 2, 5], [5], [0, 10, 4], '\n\b', [3]],
       [[5], 8, [10, 9, 10, 6, 9], [0]],
       [4, [], 10, 4, []]
     ],
     []
   ]},
  {[[[10, 3, 1], 3, 7, [[5, 5]]], []],
   [
     [[[0, 7, 6, 3], [5, 1, 5, 0]], 0, 6],
     [2, [[4, 7, 8, 4], [], [8, 2, 1, 10], [], [7, 1]]],
     [[[5, 6]], 10, [0, [6, 9, 10, 10], 5]],
     [
       [[1, 2, 3, 6, 4], [3], 9, [9, 9, 9, 0], 4],
       5,
       [[4, 2, 5, 1, 2], 2, [4, 6, 8, 8], 9, [9, 10, 5, 3, 8]],
       [[3, 6, 0], 3, 5]
     ],
     [[[], 9, 5], 10]
   ]},
  {[[[0, [4, 3], 9], [10, 1], 4, [[5, 7, 5, 1, 7], 5]], []], [[], [], []]},
  {[
     [6, [7, [], 3, [0, 2, 9], [0, 2, 5, 5, 5]], [9, [3, 8, 10, 1, 3], 3, [4, 6]], 3],
     [[[6], 4]],
     []
   ], ['\b', [1, 5, [7, [0, 8], [1, 0, 2, 10, 6], [6, 0, 8, 1, 1]], 10]]},
  {[[9, [2, [3]], []], [], [3, 3, 9, 3], [[[1], 9, '\n\a', [0, 8, 7], [7, 4, 2, 8]]]],
   [[[], [1], [[1, 1], 10]], [6], [[[], 3, [7, 3, 10, 5, 7]], []], []]},
  {[
     [],
     [[[2, 4], [1, 2, 4, 7, 8], 5, [1, 9, 6]], 6, [[2, 7, 4, 7], 6, '\a', 10, 8]],
     [1, [5], [[10, 4], [7, 5, 10, 2], 10, [5]], [3, [], [8, 9, 0, 3, 2]], 6],
     [2, []]
   ],
   [
     [[], 4],
     [[4, 4, [], 7], 4, 9, 9],
     [],
     [[0, 2], ['\t\n', 0, 0], 8, [6, 2, [5, 10, 9, ...]], 1],
     [3, [10, [], [], 3, 1], 8, [[0, 2, 6, 10, ...], [9, 9, 5, ...], [0, 4, ...], [3, ...]], 10]
   ]},
  {[
     [],
     [8, [1, 8], 2, 2, [[1, 2, 10, 10], '\b\n', [1, 8, 10, 3, ...], 6]],
     [2, 7, 7, 0, [[2, 9, 10, 0], 10, 2]]
   ],
   [
     [8, [], ['\t', 8]],
     [0, 5, [[7, 1], [3], [8, 1, 8], 2], [], [[], 8, [10, 0, 7]]],
     [3, [], [[], [5, 5, 7], [10, 7, 7, 5, ...]], 7]
   ]},
  {[[[], [[3]], [[5, 10, 0, 0, 1], 0, [2], [2], 4]], [[[6], 2, [2, 0, 9, 4], 4, 7]]],
   [[3, 5, [0, 5, 7, 10]]]},
  {[[3, 9], [4, [], 10, 5]],
   [[[5, 4, 2, 2], [[7, 7, 2, 9, 5]]], [[], 0, 7, [8, [1, 9, 1, ...], 8, [3, ...]], 1]]},
  {[[], [4, 1, 5, 8, 6], [0, 1, 1, [9, [], [5, ...], '\a'], 3], [], [3, 10]],
   [
     [[6, 8, 2, [4, 7, 3, 3, ...], [5, 7, 0]], [[3, 4, 4, 0], 6, 3], 5, 0],
     [[2, [4, 4, 6, 3, 5], [0, 0, 5, 3, ...], 4], 10, 6, [[5, 6, 0, ...]], [4, 6, 2, ...]],
     [[], 2, [0, 5]]
   ]},
  {[[], [2, 10, 10, 6, 4], [[], [[1, 5, 9, 1, ...]], 10, 3], [[1, 9]], [3, 3, 1]],
   [[3], [[[10, 10, 1], [3, 10, 2], 7], 5, [[2], []], ['\n', '\a\b', 4, ...]]]},
  {[[], [], [[5], 8, [3, '\n\n', 0], 0], [], [[], ['\a', [...], ...], [[...], ...], 10]],
   [
     [10, [8, 7, 5, [4]], [9, '\t', [8, ...], [...]], [[9, 4, ...], 7, 4], 4],
     [[4, '\a'], [5, [6, 2], []], '\a', 0, 9],
     [[[3, 5, 10], 9, 9]],
     [[3, 4, 1, ...], 0, [[...], ...], 0, ...]
   ]},
  {[
     [[], 5, [4, 8], 2],
     [[]],
     [[5, 8, 4, 6], [], [6, [...], ...]],
     [[4, [], 2, ...], 3, 1, [...], ...]
   ],
   [
     [6, ['\n', [3, 5, ...], 7, [...], ...], 7],
     [[], [[7, 5, ...], '\a\b', [...], ...]],
     [0, 3, 4, [], ...],
     [[4, 2, ...]],
     [10, 8, ...]
   ]},
  {['\b\n', [8, ['\a\a', [3, ...]], [], 9, [...]], '\a', [10, 2, [...], ...]],
   [[[[], 8, 10], 3, [9, '\n', ...], 8, 5], [1, 4, [[...], ...]], [[], [[...], ...], [...]], []]},
  {[[9, 4, [[5, ...], 5, ...], 6, [...]], [0], [], [6], [[...]]], [[3, 1], [2], [7, [...], ...]]},
  {[[], [[[8, ...], 8], 1, [...], ...], [3, 10, ...]], [[[]]]},
  {[[[2], 9, [], ...], [[[...], ...]], [[...], ...], []], [[[[...], ...], 7, ...], [], [...], ...]},
  {[[[2], [...]], [[...], ...], [...]], ['\a', [...], ...]},
  {[[], '\b'], [[...], ...]},
  {[[...], ...], [...]},
  {[...], ...},
  {...},
  ...
]
```

## Estrela 1: Comparando pacotes

Como as regras de comparação não são triviais, vamos precisar criar nosso próprio _Comparator_. A parte mais complicada aqui foi criar uma maneira de tratar dois casos similares:

* O fim simultaneo de dos dois pacotes iguais
* O fim de duas listas iguais dentro de pacotes que não são iguais

Para isso usamos o atom `:tie`: ele indica se devemos prosseguir comparando os próximos dados do pacote quando finalizamos uma comparação entre duas listas.

Finalizada a comparação, basta filtrar a lista para buscar os resultados que já estavam ordenados e somar seus índices.

```elixir
defmodule PacketComparator do
  def compare([], []),
    do: :tie

  def compare([], [_packet2 | _rest]),
    do: true

  def compare([_packet1 | _rest], []),
    do: false

  def compare([number1 | _packet1], [number2 | _packet2])
      when is_number(number1) and is_number(number2) and number1 < number2,
      do: true

  def compare([number1 | rest1], [number2 | rest2])
      when is_number(number1) and is_number(number2) and number1 == number2,
      do: compare(rest1, rest2)

  def compare([number1 | _packet1], [number2 | _packet2])
      when is_number(number1) and is_number(number2) and number1 > number2,
      do: false

  def compare([item1 | rest1], packet2 = [item2 | _rest2])
      when is_number(item1) and is_list(item2) do
    compare([[item1] | rest1], packet2)
  end

  def compare(packet1 = [item1 | _rest1], [item2 | rest2])
      when is_list(item1) and is_number(item2) do
    compare(packet1, [[item2] | rest2])
  end

  def compare([item1 | rest1], [item2 | rest2])
      when is_list(item1) and is_list(item2) do
    case compare(item1, item2) do
      :tie -> compare(rest1, rest2)
      result -> result
    end
  end
end

packets
|> Enum.map(fn {packet1, packet2} -> PacketComparator.compare(packet1, packet2) end)
|> Enum.with_index(1)
|> Enum.filter(fn {value, _index} -> value == true end)
|> Enum.map(fn {_value, index} -> index end)
|> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
6484
```

## Estrela 2: Organizando todos os pacotes

O comparador que criamos anteriormente já resolve esse problema. A única coisa que precisamos fazer aqui é:

* Achatar a lista de pacotes, porque não vamos mais analisá-los em duplas
* Inserir os pacotes _dividers_
* Ordenar a lista de pacotes usando o `PacketComparator`

```elixir
result =
  packets
  |> Enum.flat_map(&Tuple.to_list/1)
  |> List.insert_at(0, [[2]])
  |> List.insert_at(0, [[6]])
  |> Enum.sort(&PacketComparator.compare/2)

index1 = Enum.find_index(result, fn item -> item == [[2]] end) + 1
index2 = Enum.find_index(result, fn item -> item == [[6]] end) + 1

index1 * index2
```

<!-- livebook:{"output":true} -->

```
19305
```
