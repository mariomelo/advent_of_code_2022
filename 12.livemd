<!-- livebook:{"persist_outputs":true} -->

# Dia 12 - Subindo a Montanha

```elixir
Mix.install([
  {:kino, "~> 0.8.0"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Leitura do arquivo de Entrada

```elixir
input = Kino.Input.textarea("Entrada")
```

O primeiro passo é transformar a matriz de entrada em um mapa de alturas por ponto, onde as chaves são as coordenadas e o valor representa a altura.

Para facilitar, vamos transformar as letras em codepoints (inteiros) e fazer um pequeno ajuste: a letra "S" passa a ser o codepoint anterior ao "a", e a letra "E" passa a ser o codepoint posterior ao "z". Assim conseguimos garantir que a altura de "S" será a menor do mapa e a altura de "E" a maior.

```elixir
height_matrix =
  Kino.Input.read(input)
  |> String.replace("S", <<?a - 1::utf8>>)
  |> String.replace("E", <<?z + 1::utf8>>)
  |> String.split("\n", trim: true)
  |> Enum.map(fn line -> String.split(line, "", trim: true) end)
  |> Enum.map(fn line -> Enum.map(line, fn <<codepoint::utf8>> -> codepoint end) end)
  |> Enum.map(&Enum.with_index/1)
  |> Enum.with_index()
  |> Enum.flat_map(fn {row, row_index} ->
    Enum.map(row, fn {height, col_index} -> {{row_index, col_index}, height} end)
  end)
  |> Map.new()
```

<!-- livebook:{"output":true} -->

```
%{
  {37, 47} => 97,
  {38, 2} => 99,
  {1, 26} => 97,
  {32, 15} => 99,
  {35, 30} => 97,
  {37, 53} => 97,
  {4, 5} => 97,
  {8, 50} => 107,
  {11, 39} => 99,
  {22, 38} => 112,
  {20, 41} => 116,
  {29, 25} => 99,
  {29, 26} => 99,
  {31, 42} => 111,
  {9, 34} => 97,
  {20, 3} => 99,
  {23, 67} => 99,
  {13, 55} => 107,
  {22, 37} => 112,
  {9, 58} => 99,
  {22, 36} => 104,
  {30, 57} => 110,
  {19, 38} => 113,
  {27, 21} => 97,
  {9, 33} => 97,
  {26, 41} => 112,
  {21, 35} => 104,
  {19, 22} => 99,
  {16, 10} => 97,
  {21, 45} => 120,
  {11, 8} => 97,
  {26, 21} => 97,
  {21, 48} => 121,
  {10, 25} => 99,
  {11, 19} => 99,
  {16, 38} => 113,
  {35, 15} => 99,
  {37, 15} => 99,
  {35, 26} => 99,
  {28, 20} => 99,
  {27, 22} => 97,
  {16, 24} => 97,
  {6, 18} => 99,
  {32, 58} => 101,
  {10, 32} => 97,
  {21, 57} => 113,
  {24, 59} => 109,
  {34, 61} => 97,
  {32, ...} => 110,
  {...} => 99,
  ...
}
```

## Estrela 1: Encontrando o menor caminho

Como a regra diz que só podemos caminhar para pontos que sejam no máximo um nível mais altos que o atual, precisamos desenhar o grafo que corresponde a essa restrição.

Para isso, vamos criar um segundo mapa que contém as origens como chaves e a lista de possíveis destinos como valor.

```elixir
full_graph =
  height_matrix
  |> Enum.reduce(%{}, fn {point, height}, paths ->
    destinations = []
    {row, column} = point

    destinations =
      if Map.get(height_matrix, {row - 1, column}, 999) <= height + 1 do
        [{row - 1, column} | destinations]
      else
        destinations
      end

    destinations =
      if Map.get(height_matrix, {row + 1, column}, 999) <= height + 1 do
        [{row + 1, column} | destinations]
      else
        destinations
      end

    destinations =
      if Map.get(height_matrix, {row, column - 1}, 999) <= height + 1 do
        [{row, column - 1} | destinations]
      else
        destinations
      end

    destinations =
      if Map.get(height_matrix, {row, column + 1}, 999) <= height + 1 do
        [{row, column + 1} | destinations]
      else
        destinations
      end

    Map.put(paths, point, destinations)
  end)
```

<!-- livebook:{"output":true} -->

```
%{
  {37, 47} => [{37, 48}, {37, 46}, {38, 47}, {36, 47}],
  {38, 2} => [{38, 3}, {38, 1}, {39, 2}, {37, 2}],
  {1, 26} => [{1, 27}, {1, 25}, {2, 26}, {0, 26}],
  {32, 15} => [{32, 16}, {32, 14}, {33, 15}, {31, 15}],
  {35, 30} => [{35, 31}, {35, 29}, {36, 30}],
  {37, 53} => [{37, 54}, {36, 53}],
  {4, 5} => [{4, 6}, {4, 4}, {5, 5}, {3, 5}],
  {8, 50} => [{8, 51}, {7, 50}],
  {11, 39} => [{11, 38}, {10, 39}],
  {22, 38} => [{22, 39}, {22, 37}, {23, 38}, {21, 38}],
  {20, 41} => [{20, 40}, {21, 41}, {19, 41}],
  {29, 25} => [{29, 26}, {29, 24}, {30, 25}, {28, 25}],
  {29, 26} => [{29, 27}, {29, 25}, {30, 26}, {28, 26}],
  {31, 42} => [{31, 43}, {31, 41}, {32, 42}, {30, 42}],
  {9, 34} => [{9, 35}, {9, 33}, {8, 34}],
  {20, 3} => [{20, 4}, {20, 2}, {21, 3}, {19, 3}],
  {23, 67} => [{23, 68}, {23, 66}, {24, 67}, {22, 67}],
  {13, 55} => [{13, 56}, {12, 55}],
  {22, 37} => [{22, 38}, {22, 36}, {23, 37}, {21, 37}],
  {9, 58} => [{9, 59}, {9, 57}, {10, 58}, {8, 58}],
  {22, 36} => [{22, 35}, {23, 36}, {21, 36}],
  {30, 57} => [{30, 58}, {30, 56}, {31, 57}, {29, 57}],
  {19, 38} => [{19, 37}, {20, 38}, {18, 38}],
  {27, 21} => [{27, 22}, {27, 20}, {26, 21}],
  {9, 33} => [{9, 34}, {9, 32}, {10, 33}, {8, 33}],
  {26, 41} => [{26, 40}, {27, 41}, {25, 41}],
  {21, 35} => [{21, 36}, {21, 34}, {22, 35}, {20, 35}],
  {19, 22} => [{19, 23}, {19, 21}, {20, 22}, {18, 22}],
  {16, 10} => [{16, 11}, {16, 9}, {15, 10}],
  {21, 45} => [{21, 46}, {21, 44}, {22, 45}, {20, 45}],
  {11, 8} => [{11, 9}, {12, 8}],
  {26, 21} => [{26, 22}, {26, 20}, {27, 21}, {25, 21}],
  {21, 48} => [{21, 49}, {21, 47}, {22, 48}, {20, 48}],
  {10, 25} => [{10, 26}, {10, 24}, {11, 25}, {9, 25}],
  {11, 19} => [{11, 20}, {11, 18}, {12, 19}, {10, 19}],
  {16, 38} => [{16, 39}, {16, 37}, {17, 38}, {15, 38}],
  {35, 15} => [{35, 16}, {35, 14}, {36, 15}, {34, 15}],
  {37, 15} => [{37, 16}, {37, 14}, {38, 15}, {36, 15}],
  {35, 26} => [{35, 27}, {35, 25}, {36, 26}, {34, 26}],
  {28, 20} => [{28, 21}, {28, 19}, {29, 20}, {27, 20}],
  {27, 22} => [{27, 23}, {27, 21}, {26, 22}],
  {16, 24} => [{16, 25}, {16, 23}, {15, 24}],
  {6, 18} => [{6, 19}, {6, 17}, {7, 18}, {5, 18}],
  {32, 58} => [{32, 59}, {33, 58}],
  {10, 32} => [{10, 33}, {10, 31}, {11, 32}, {9, ...}],
  {21, 57} => [{21, 58}, {21, 56}, {22, ...}, {...}],
  {24, 59} => [{24, 60}, {24, ...}, {...}, ...],
  {34, 61} => [{34, ...}, {...}],
  {32, ...} => [{...}, ...],
  {...} => [...],
  ...
}
```

Agora basta usar um algoritmo simples de Dijkstra e encontrar o menor valor para o ponto final partindo do ponto inicial.

```elixir
defmodule SimpleDijkstra do
  def start(graph, starting_point) do
    results =
      graph
      |> Enum.map(fn {point, _height} -> {point, 999_999_999} end)
      |> Map.new()

    iterate(graph, results, starting_point, 0)
  end

  defp iterate(graph, results, point, current_distance) do
    if current_distance < Map.get(results, point) do
      current_result = Map.replace(results, point, current_distance)

      Map.get(graph, point)
      |> Enum.reduce(current_result, fn dest, updated_results ->
        iterate(graph, updated_results, dest, current_distance + 1)
      end)
    else
      results
    end
  end
end

start_point =
  Map.filter(height_matrix, fn {_key, value} -> value == ?a - 1 end)
  |> Map.keys()
  |> Enum.at(0)

result = SimpleDijkstra.start(full_graph, start_point)

end_point =
  Map.filter(height_matrix, fn {_key, value} -> value == ?z + 1 end)
  |> Map.keys()
  |> Enum.at(0)

Map.get(result, end_point)
```

<!-- livebook:{"output":true} -->

```
352
```

## Estrela 2: Começando da posição "a"

Agora podemos começar de múltiplas posições, mas **continuamos tendo um único destino**.

Por isso faz mais sentido inverter o grafo: agora só poderemos andar para pontos que sejam no **máximo um nível abaixo**.

```elixir
full_graph =
  height_matrix
  |> Enum.reduce(%{}, fn {point, height}, paths ->
    destinations = []
    {row, column} = point

    destinations =
      if Map.get(height_matrix, {row - 1, column}, -1) + 1 >= height do
        [{row - 1, column} | destinations]
      else
        destinations
      end

    destinations =
      if Map.get(height_matrix, {row + 1, column}, -1) + 1 >= height do
        [{row + 1, column} | destinations]
      else
        destinations
      end

    destinations =
      if Map.get(height_matrix, {row, column - 1}, -1) + 1 >= height do
        [{row, column - 1} | destinations]
      else
        destinations
      end

    destinations =
      if Map.get(height_matrix, {row, column + 1}, -1) + 1 >= height do
        [{row, column + 1} | destinations]
      else
        destinations
      end

    Map.put(paths, point, destinations)
  end)
```

<!-- livebook:{"output":true} -->

```
%{
  {37, 47} => [{37, 48}, {37, 46}, {38, 47}, {36, 47}],
  {38, 2} => [{38, 3}, {38, 1}, {39, 2}, {37, 2}],
  {1, 26} => [{1, 27}, {1, 25}, {2, 26}, {0, 26}],
  {32, 15} => [{32, 16}, {32, 14}, {33, 15}, {31, 15}],
  {35, 30} => [{35, 31}, {35, 29}, {36, 30}, {34, 30}],
  {37, 53} => [{37, 54}, {37, 52}, {38, 53}, {36, 53}],
  {4, 5} => [{4, 6}, {4, 4}, {5, 5}, {3, 5}],
  {8, 50} => [{8, 51}, {8, 49}, {9, 50}, {7, 50}],
  {11, 39} => [{11, 40}, {11, 38}, {12, 39}, {10, 39}],
  {22, 38} => [{22, 39}, {22, 37}, {23, 38}, {21, 38}],
  {20, 41} => [{20, 42}, {20, 40}, {21, 41}, {19, 41}],
  {29, 25} => [{29, 26}, {29, 24}, {30, 25}],
  {29, 26} => [{29, 27}, {29, 25}, {30, 26}, {28, 26}],
  {31, 42} => [{31, 43}, {31, 41}, {32, 42}, {30, 42}],
  {9, 34} => [{9, 35}, {9, 33}, {10, 34}, {8, 34}],
  {20, 3} => [{20, 4}, {20, 2}, {21, 3}, {19, 3}],
  {23, 67} => [{23, 68}, {23, 66}, {24, 67}, {22, 67}],
  {13, 55} => [{13, 56}, {13, 54}, {14, 55}, {12, 55}],
  {22, 37} => [{22, 38}, {21, 37}],
  {9, 58} => [{9, 59}, {9, 57}, {8, 58}],
  {22, 36} => [{22, 37}, {22, 35}, {23, 36}, {21, 36}],
  {30, 57} => [{30, 58}, {30, 56}, {31, 57}, {29, 57}],
  {19, 38} => [{19, 39}, {19, 37}, {20, 38}, {18, 38}],
  {27, 21} => [{27, 22}, {27, 20}, {28, 21}, {26, 21}],
  {9, 33} => [{9, 34}, {9, 32}, {10, 33}, {8, 33}],
  {26, 41} => [{26, 42}, {26, 40}, {27, 41}, {25, 41}],
  {21, 35} => [{21, 36}, {21, 34}, {22, 35}, {20, 35}],
  {19, 22} => [{19, 23}, {19, 21}, {20, 22}, {18, 22}],
  {16, 10} => [{16, 11}, {16, 9}, {17, 10}, {15, 10}],
  {21, 45} => [{21, 46}, {21, 44}, {22, 45}, {20, 45}],
  {11, 8} => [{11, 9}, {11, 7}, {12, 8}, {10, 8}],
  {26, 21} => [{26, 22}, {26, 20}, {27, 21}, {25, 21}],
  {21, 48} => [{21, 49}, {21, 47}, {22, 48}, {20, 48}],
  {10, 25} => [{10, 26}, {10, 24}, {11, 25}, {9, 25}],
  {11, 19} => [{11, 20}, {11, 18}, {12, 19}, {10, 19}],
  {16, 38} => [{16, 39}, {16, 37}, {17, 38}, {15, 38}],
  {35, 15} => [{35, 16}, {35, 14}, {36, 15}, {34, 15}],
  {37, 15} => [{37, 16}, {38, 15}, {36, 15}],
  {35, 26} => [{35, 25}, {34, 26}],
  {28, 20} => [{28, 21}, {28, 19}, {29, 20}],
  {27, 22} => [{27, 23}, {27, 21}, {28, 22}, {26, 22}],
  {16, 24} => [{16, 25}, {16, 23}, {17, 24}, {15, 24}],
  {6, 18} => [{6, 19}, {6, 17}, {7, 18}, {5, 18}],
  {32, 58} => [{32, 59}, {32, 57}, {33, 58}, {31, 58}],
  {10, 32} => [{10, 33}, {10, 31}, {11, 32}, {9, ...}],
  {21, 57} => [{21, 58}, {21, 56}, {22, ...}, {...}],
  {24, 59} => [{24, 58}, {25, ...}, {...}],
  {34, 61} => [{34, ...}, {...}, ...],
  {32, ...} => [{...}, ...],
  {...} => [...],
  ...
}
```

Por fim, calculamos o mapa de distâncias partindo do ponto "E" (ponto final), filtramos o resultado para encontrar a distância de todos os pontos "a" e selecionamos a menor distância.

```elixir
start_point =
  Map.filter(height_matrix, fn {_key, value} -> value == ?z + 1 end)
  |> Map.keys()
  |> Enum.at(0)

ending_points =
  Map.filter(height_matrix, fn {_key, value} -> value == ?a end)
  |> Map.keys()

SimpleDijkstra.start(full_graph, start_point)
|> Enum.filter(fn {point, _distance} -> point in ending_points end)
|> Enum.map(fn {_point, distance} -> distance end)
|> Enum.min()
```

<!-- livebook:{"output":true} -->

```
345
```
